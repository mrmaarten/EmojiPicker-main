{
  "version": 3,
  "sources": ["../../emoji-picker-element/database.js", "../../emoji-picker-element/picker.js"],
  "sourcesContent": ["function assertNonEmptyString (str) {\n  if (typeof str !== 'string' || !str) {\n    throw new Error('expected a non-empty string, got: ' + str)\n  }\n}\n\nfunction assertNumber (number) {\n  if (typeof number !== 'number') {\n    throw new Error('expected a number, got: ' + number)\n  }\n}\n\nconst DB_VERSION_CURRENT = 1;\nconst DB_VERSION_INITIAL = 1;\nconst STORE_EMOJI = 'emoji';\nconst STORE_KEYVALUE = 'keyvalue';\nconst STORE_FAVORITES = 'favorites';\nconst FIELD_TOKENS = 'tokens';\nconst INDEX_TOKENS = 'tokens';\nconst FIELD_UNICODE = 'unicode';\nconst INDEX_COUNT = 'count';\nconst FIELD_GROUP = 'group';\nconst FIELD_ORDER = 'order';\nconst INDEX_GROUP_AND_ORDER = 'group-order';\nconst KEY_ETAG = 'eTag';\nconst KEY_URL = 'url';\nconst KEY_PREFERRED_SKINTONE = 'skinTone';\nconst MODE_READONLY = 'readonly';\nconst MODE_READWRITE = 'readwrite';\nconst INDEX_SKIN_UNICODE = 'skinUnicodes';\nconst FIELD_SKIN_UNICODE = 'skinUnicodes';\n\nconst DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';\nconst DEFAULT_LOCALE = 'en';\n\n// like lodash's uniqBy but much smaller\nfunction uniqBy (arr, func) {\n  const set = new Set();\n  const res = [];\n  for (const item of arr) {\n    const key = func(item);\n    if (!set.has(key)) {\n      set.add(key);\n      res.push(item);\n    }\n  }\n  return res\n}\n\nfunction uniqEmoji (emojis) {\n  return uniqBy(emojis, _ => _.unicode)\n}\n\nfunction initialMigration (db) {\n  function createObjectStore (name, keyPath, indexes) {\n    const store = keyPath\n      ? db.createObjectStore(name, { keyPath })\n      : db.createObjectStore(name);\n    if (indexes) {\n      for (const [indexName, [keyPath, multiEntry]] of Object.entries(indexes)) {\n        store.createIndex(indexName, keyPath, { multiEntry });\n      }\n    }\n    return store\n  }\n\n  createObjectStore(STORE_KEYVALUE);\n  createObjectStore(STORE_EMOJI, /* keyPath */ FIELD_UNICODE, {\n    [INDEX_TOKENS]: [FIELD_TOKENS, /* multiEntry */ true],\n    [INDEX_GROUP_AND_ORDER]: [[FIELD_GROUP, FIELD_ORDER]],\n    [INDEX_SKIN_UNICODE]: [FIELD_SKIN_UNICODE, /* multiEntry */ true]\n  });\n  createObjectStore(STORE_FAVORITES, undefined, {\n    [INDEX_COUNT]: ['']\n  });\n}\n\nconst openIndexedDBRequests = {};\nconst databaseCache = {};\nconst onCloseListeners = {};\n\nfunction handleOpenOrDeleteReq (resolve, reject, req) {\n  // These things are almost impossible to test with fakeIndexedDB sadly\n  /* istanbul ignore next */\n  req.onerror = () => reject(req.error);\n  /* istanbul ignore next */\n  req.onblocked = () => reject(new Error('IDB blocked'));\n  req.onsuccess = () => resolve(req.result);\n}\n\nasync function createDatabase (dbName) {\n  const db = await new Promise((resolve, reject) => {\n    const req = indexedDB.open(dbName, DB_VERSION_CURRENT);\n    openIndexedDBRequests[dbName] = req;\n    req.onupgradeneeded = e => {\n      // Technically there is only one version, so we don't need this `if` check\n      // But if an old version of the JS is in another browser tab\n      // and it gets upgraded in the future and we have a new DB version, well...\n      // better safe than sorry.\n      /* istanbul ignore else */\n      if (e.oldVersion < DB_VERSION_INITIAL) {\n        initialMigration(req.result);\n      }\n    };\n    handleOpenOrDeleteReq(resolve, reject, req);\n  });\n  // Handle abnormal closes, e.g. \"delete database\" in chrome dev tools.\n  // No need for removeEventListener, because once the DB can no longer\n  // fire \"close\" events, it will auto-GC.\n  // Unfortunately cannot test in fakeIndexedDB: https://github.com/dumbmatter/fakeIndexedDB/issues/50\n  /* istanbul ignore next */\n  db.onclose = () => closeDatabase(dbName);\n  return db\n}\n\nfunction openDatabase (dbName) {\n  if (!databaseCache[dbName]) {\n    databaseCache[dbName] = createDatabase(dbName);\n  }\n  return databaseCache[dbName]\n}\n\nfunction dbPromise (db, storeName, readOnlyOrReadWrite, cb) {\n  return new Promise((resolve, reject) => {\n    // Use relaxed durability because neither the emoji data nor the favorites/preferred skin tone\n    // are really irreplaceable data. IndexedDB is just a cache in this case.\n    const txn = db.transaction(storeName, readOnlyOrReadWrite, { durability: 'relaxed' });\n    const store = typeof storeName === 'string'\n      ? txn.objectStore(storeName)\n      : storeName.map(name => txn.objectStore(name));\n    let res;\n    cb(store, txn, (result) => {\n      res = result;\n    });\n\n    txn.oncomplete = () => resolve(res);\n    /* istanbul ignore next */\n    txn.onerror = () => reject(txn.error);\n  })\n}\n\nfunction closeDatabase (dbName) {\n  // close any open requests\n  const req = openIndexedDBRequests[dbName];\n  const db = req && req.result;\n  if (db) {\n    db.close();\n    const listeners = onCloseListeners[dbName];\n    /* istanbul ignore else */\n    if (listeners) {\n      for (const listener of listeners) {\n        listener();\n      }\n    }\n  }\n  delete openIndexedDBRequests[dbName];\n  delete databaseCache[dbName];\n  delete onCloseListeners[dbName];\n}\n\nfunction deleteDatabase (dbName) {\n  return new Promise((resolve, reject) => {\n    // close any open requests\n    closeDatabase(dbName);\n    const req = indexedDB.deleteDatabase(dbName);\n    handleOpenOrDeleteReq(resolve, reject, req);\n  })\n}\n\n// The \"close\" event occurs during an abnormal shutdown, e.g. a user clearing their browser data.\n// However, it doesn't occur with the normal \"close\" event, so we handle that separately.\n// https://www.w3.org/TR/IndexedDB/#close-a-database-connection\nfunction addOnCloseListener (dbName, listener) {\n  let listeners = onCloseListeners[dbName];\n  if (!listeners) {\n    listeners = onCloseListeners[dbName] = [];\n  }\n  listeners.push(listener);\n}\n\n// list of emoticons that don't match a simple \\W+ regex\n// extracted using:\n// require('emoji-picker-element-data/en/emojibase/data.json').map(_ => _.emoticon).filter(Boolean).filter(_ => !/^\\W+$/.test(_))\nconst irregularEmoticons = new Set([\n  ':D', 'XD', \":'D\", 'O:)',\n  ':X', ':P', ';P', 'XP',\n  ':L', ':Z', ':j', '8D',\n  'XO', '8)', ':B', ':O',\n  ':S', \":'o\", 'Dx', 'X(',\n  'D:', ':C', '>0)', ':3',\n  '</3', '<3', '\\\\M/', ':E',\n  '8#'\n]);\n\nfunction extractTokens (str) {\n  return str\n    .split(/[\\s_]+/)\n    .map(word => {\n      if (!word.match(/\\w/) || irregularEmoticons.has(word)) {\n        // for pure emoticons like :) or :-), just leave them as-is\n        return word.toLowerCase()\n      }\n\n      return word\n        .replace(/[)(:,]/g, '')\n        .replace(/’/g, \"'\")\n        .toLowerCase()\n    }).filter(Boolean)\n}\n\nconst MIN_SEARCH_TEXT_LENGTH = 2;\n\n// This is an extra step in addition to extractTokens(). The difference here is that we expect\n// the input to have already been run through extractTokens(). This is useful for cases like\n// emoticons, where we don't want to do any tokenization (because it makes no sense to split up\n// \">:)\" by the colon) but we do want to lowercase it to have consistent search results, so that\n// the user can type ':P' or ':p' and still get the same result.\nfunction normalizeTokens (str) {\n  return str\n    .filter(Boolean)\n    .map(_ => _.toLowerCase())\n    .filter(_ => _.length >= MIN_SEARCH_TEXT_LENGTH)\n}\n\n// Transform emoji data for storage in IDB\nfunction transformEmojiData (emojiData) {\n  const res = emojiData.map(({ annotation, emoticon, group, order, shortcodes, skins, tags, emoji, version }) => {\n    const tokens = [...new Set(\n      normalizeTokens([\n        ...(shortcodes || []).map(extractTokens).flat(),\n        ...tags.map(extractTokens).flat(),\n        ...extractTokens(annotation),\n        emoticon\n      ])\n    )].sort();\n    const res = {\n      annotation,\n      group,\n      order,\n      tags,\n      tokens,\n      unicode: emoji,\n      version\n    };\n    if (emoticon) {\n      res.emoticon = emoticon;\n    }\n    if (shortcodes) {\n      res.shortcodes = shortcodes;\n    }\n    if (skins) {\n      res.skinTones = [];\n      res.skinUnicodes = [];\n      res.skinVersions = [];\n      for (const { tone, emoji, version } of skins) {\n        res.skinTones.push(tone);\n        res.skinUnicodes.push(emoji);\n        res.skinVersions.push(version);\n      }\n    }\n    return res\n  });\n  return res\n}\n\n// helper functions that help compress the code better\n\nfunction callStore (store, method, key, cb) {\n  store[method](key).onsuccess = e => (cb && cb(e.target.result));\n}\n\nfunction getIDB (store, key, cb) {\n  callStore(store, 'get', key, cb);\n}\n\nfunction getAllIDB (store, key, cb) {\n  callStore(store, 'getAll', key, cb);\n}\n\nfunction commit (txn) {\n  /* istanbul ignore else */\n  if (txn.commit) {\n    txn.commit();\n  }\n}\n\n// like lodash's minBy\nfunction minBy (array, func) {\n  let minItem = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const item = array[i];\n    if (func(minItem) > func(item)) {\n      minItem = item;\n    }\n  }\n  return minItem\n}\n\n// return an array of results representing all items that are found in each one of the arrays\n//\n\nfunction findCommonMembers (arrays, uniqByFunc) {\n  const shortestArray = minBy(arrays, _ => _.length);\n  const results = [];\n  for (const item of shortestArray) {\n    // if this item is included in every array in the intermediate results, add it to the final results\n    if (!arrays.some(array => array.findIndex(_ => uniqByFunc(_) === uniqByFunc(item)) === -1)) {\n      results.push(item);\n    }\n  }\n  return results\n}\n\nasync function isEmpty (db) {\n  return !(await get(db, STORE_KEYVALUE, KEY_URL))\n}\n\nasync function hasData (db, url, eTag) {\n  const [oldETag, oldUrl] = await Promise.all([KEY_ETAG, KEY_URL]\n    .map(key => get(db, STORE_KEYVALUE, key)));\n  return (oldETag === eTag && oldUrl === url)\n}\n\nasync function doFullDatabaseScanForSingleResult (db, predicate) {\n  // This batching algorithm is just a perf improvement over a basic\n  // cursor. The BATCH_SIZE is an estimate of what would give the best\n  // perf for doing a full DB scan (worst case).\n  //\n  // Mini-benchmark for determining the best batch size:\n  //\n  // PERF=1 yarn build:rollup && yarn test:adhoc\n  //\n  // (async () => {\n  //   performance.mark('start')\n  //   await $('emoji-picker').database.getEmojiByShortcode('doesnotexist')\n  //   performance.measure('total', 'start')\n  //   console.log(performance.getEntriesByName('total').slice(-1)[0].duration)\n  // })()\n  const BATCH_SIZE = 50; // Typically around 150ms for 6x slowdown in Chrome for above benchmark\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    let lastKey;\n\n    const processNextBatch = () => {\n      emojiStore.getAll(lastKey && IDBKeyRange.lowerBound(lastKey, true), BATCH_SIZE).onsuccess = e => {\n        const results = e.target.result;\n        for (const result of results) {\n          lastKey = result.unicode;\n          if (predicate(result)) {\n            return cb(result)\n          }\n        }\n        if (results.length < BATCH_SIZE) {\n          return cb()\n        }\n        processNextBatch();\n      };\n    };\n    processNextBatch();\n  })\n}\n\nasync function loadData (db, emojiData, url, eTag) {\n  try {\n    const transformedData = transformEmojiData(emojiData);\n    await dbPromise(db, [STORE_EMOJI, STORE_KEYVALUE], MODE_READWRITE, ([emojiStore, metaStore], txn) => {\n      let oldETag;\n      let oldUrl;\n      let todo = 0;\n\n      function checkFetched () {\n        if (++todo === 2) { // 2 requests made\n          onFetched();\n        }\n      }\n\n      function onFetched () {\n        if (oldETag === eTag && oldUrl === url) {\n          // check again within the transaction to guard against concurrency, e.g. multiple browser tabs\n          return\n        }\n        // delete old data\n        emojiStore.clear();\n        // insert new data\n        for (const data of transformedData) {\n          emojiStore.put(data);\n        }\n        metaStore.put(eTag, KEY_ETAG);\n        metaStore.put(url, KEY_URL);\n        commit(txn);\n      }\n\n      getIDB(metaStore, KEY_ETAG, result => {\n        oldETag = result;\n        checkFetched();\n      });\n\n      getIDB(metaStore, KEY_URL, result => {\n        oldUrl = result;\n        checkFetched();\n      });\n    });\n  } finally {\n  }\n}\n\nasync function getEmojiByGroup (db, group) {\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    const range = IDBKeyRange.bound([group, 0], [group + 1, 0], false, true);\n    getAllIDB(emojiStore.index(INDEX_GROUP_AND_ORDER), range, cb);\n  })\n}\n\nasync function getEmojiBySearchQuery (db, query) {\n  const tokens = normalizeTokens(extractTokens(query));\n\n  if (!tokens.length) {\n    return []\n  }\n\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    // get all results that contain all tokens (i.e. an AND query)\n    const intermediateResults = [];\n\n    const checkDone = () => {\n      if (intermediateResults.length === tokens.length) {\n        onDone();\n      }\n    };\n\n    const onDone = () => {\n      const results = findCommonMembers(intermediateResults, _ => _.unicode);\n      cb(results.sort((a, b) => a.order < b.order ? -1 : 1));\n    };\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const range = i === tokens.length - 1\n        ? IDBKeyRange.bound(token, token + '\\uffff', false, true) // treat last token as a prefix search\n        : IDBKeyRange.only(token); // treat all other tokens as an exact match\n      getAllIDB(emojiStore.index(INDEX_TOKENS), range, result => {\n        intermediateResults.push(result);\n        checkDone();\n      });\n    }\n  })\n}\n\n// This could have been implemented as an IDB index on shortcodes, but it seemed wasteful to do that\n// when we can already query by tokens and this will give us what we're looking for 99.9% of the time\nasync function getEmojiByShortcode (db, shortcode) {\n  const emojis = await getEmojiBySearchQuery(db, shortcode);\n\n  // In very rare cases (e.g. the shortcode \"v\" as in \"v for victory\"), we cannot search because\n  // there are no usable tokens (too short in this case). In that case, we have to do an inefficient\n  // full-database scan, which I believe is an acceptable tradeoff for not having to have an extra\n  // index on shortcodes.\n\n  if (!emojis.length) {\n    const predicate = _ => ((_.shortcodes || []).includes(shortcode.toLowerCase()));\n    return (await doFullDatabaseScanForSingleResult(db, predicate)) || null\n  }\n\n  return emojis.filter(_ => {\n    const lowerShortcodes = (_.shortcodes || []).map(_ => _.toLowerCase());\n    return lowerShortcodes.includes(shortcode.toLowerCase())\n  })[0] || null\n}\n\nasync function getEmojiByUnicode (db, unicode) {\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => (\n    getIDB(emojiStore, unicode, result => {\n      if (result) {\n        return cb(result)\n      }\n      getIDB(emojiStore.index(INDEX_SKIN_UNICODE), unicode, result => cb(result || null));\n    })\n  ))\n}\n\nfunction get (db, storeName, key) {\n  return dbPromise(db, storeName, MODE_READONLY, (store, txn, cb) => (\n    getIDB(store, key, cb)\n  ))\n}\n\nfunction set (db, storeName, key, value) {\n  return dbPromise(db, storeName, MODE_READWRITE, (store, txn) => {\n    store.put(value, key);\n    commit(txn);\n  })\n}\n\nfunction incrementFavoriteEmojiCount (db, unicode) {\n  return dbPromise(db, STORE_FAVORITES, MODE_READWRITE, (store, txn) => (\n    getIDB(store, unicode, result => {\n      store.put((result || 0) + 1, unicode);\n      commit(txn);\n    })\n  ))\n}\n\nfunction getTopFavoriteEmoji (db, customEmojiIndex, limit) {\n  if (limit === 0) {\n    return []\n  }\n  return dbPromise(db, [STORE_FAVORITES, STORE_EMOJI], MODE_READONLY, ([favoritesStore, emojiStore], txn, cb) => {\n    const results = [];\n    favoritesStore.index(INDEX_COUNT).openCursor(undefined, 'prev').onsuccess = e => {\n      const cursor = e.target.result;\n      if (!cursor) { // no more results\n        return cb(results)\n      }\n\n      function addResult (result) {\n        results.push(result);\n        if (results.length === limit) {\n          return cb(results) // done, reached the limit\n        }\n        cursor.continue();\n      }\n\n      const unicodeOrName = cursor.primaryKey;\n      const custom = customEmojiIndex.byName(unicodeOrName);\n      if (custom) {\n        return addResult(custom)\n      }\n      // This could be done in parallel (i.e. make the cursor and the get()s parallelized),\n      // but my testing suggests it's not actually faster.\n      getIDB(emojiStore, unicodeOrName, emoji => {\n        if (emoji) {\n          return addResult(emoji)\n        }\n        // emoji not found somehow, ignore (may happen if custom emoji change)\n        cursor.continue();\n      });\n    };\n  })\n}\n\n// trie data structure for prefix searches\n// loosely based on https://github.com/nolanlawson/substring-trie\n\nconst CODA_MARKER = ''; // marks the end of the string\n\nfunction trie (arr, itemToTokens) {\n  const map = new Map();\n  for (const item of arr) {\n    const tokens = itemToTokens(item);\n    for (const token of tokens) {\n      let currentMap = map;\n      for (let i = 0; i < token.length; i++) {\n        const char = token.charAt(i);\n        let nextMap = currentMap.get(char);\n        if (!nextMap) {\n          nextMap = new Map();\n          currentMap.set(char, nextMap);\n        }\n        currentMap = nextMap;\n      }\n      let valuesAtCoda = currentMap.get(CODA_MARKER);\n      if (!valuesAtCoda) {\n        valuesAtCoda = [];\n        currentMap.set(CODA_MARKER, valuesAtCoda);\n      }\n      valuesAtCoda.push(item);\n    }\n  }\n\n  const search = (query, exact) => {\n    let currentMap = map;\n    for (let i = 0; i < query.length; i++) {\n      const char = query.charAt(i);\n      const nextMap = currentMap.get(char);\n      if (nextMap) {\n        currentMap = nextMap;\n      } else {\n        return []\n      }\n    }\n\n    if (exact) {\n      const results = currentMap.get(CODA_MARKER);\n      return results || []\n    }\n\n    const results = [];\n    // traverse\n    const queue = [currentMap];\n    while (queue.length) {\n      const currentMap = queue.shift();\n      const entriesSortedByKey = [...currentMap.entries()].sort((a, b) => a[0] < b[0] ? -1 : 1);\n      for (const [key, value] of entriesSortedByKey) {\n        if (key === CODA_MARKER) { // CODA_MARKER always comes first; it's the empty string\n          results.push(...value);\n        } else {\n          queue.push(value);\n        }\n      }\n    }\n    return results\n  };\n\n  return search\n}\n\nconst requiredKeys$1 = [\n  'name',\n  'url'\n];\n\nfunction assertCustomEmojis (customEmojis) {\n  const isArray = customEmojis && Array.isArray(customEmojis);\n  const firstItemIsFaulty = isArray &&\n    customEmojis.length &&\n    (!customEmojis[0] || requiredKeys$1.some(key => !(key in customEmojis[0])));\n  if (!isArray || firstItemIsFaulty) {\n    throw new Error('Custom emojis are in the wrong format')\n  }\n}\n\nfunction customEmojiIndex (customEmojis) {\n  assertCustomEmojis(customEmojis);\n\n  const sortByName = (a, b) => a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1;\n\n  //\n  // all()\n  //\n  const all = customEmojis.sort(sortByName);\n\n  //\n  // search()\n  //\n  const emojiToTokens = emoji => (\n    [...new Set((emoji.shortcodes || []).map(shortcode => extractTokens(shortcode)).flat())]\n  );\n  const searchTrie = trie(customEmojis, emojiToTokens);\n  const searchByExactMatch = _ => searchTrie(_, true);\n  const searchByPrefix = _ => searchTrie(_, false);\n\n  // Search by query for custom emoji. Similar to how we do this in IDB, the last token\n  // is treated as a prefix search, but every other one is treated as an exact match.\n  // Then we AND the results together\n  const search = query => {\n    const tokens = extractTokens(query);\n    const intermediateResults = tokens.map((token, i) => (\n      (i < tokens.length - 1 ? searchByExactMatch : searchByPrefix)(token)\n    ));\n    return findCommonMembers(intermediateResults, _ => _.name).sort(sortByName)\n  };\n\n  //\n  // byShortcode, byName\n  //\n  const shortcodeToEmoji = new Map();\n  const nameToEmoji = new Map();\n  for (const customEmoji of customEmojis) {\n    nameToEmoji.set(customEmoji.name.toLowerCase(), customEmoji);\n    for (const shortcode of (customEmoji.shortcodes || [])) {\n      shortcodeToEmoji.set(shortcode.toLowerCase(), customEmoji);\n    }\n  }\n\n  const byShortcode = shortcode => shortcodeToEmoji.get(shortcode.toLowerCase());\n  const byName = name => nameToEmoji.get(name.toLowerCase());\n\n  return {\n    all,\n    search,\n    byShortcode,\n    byName\n  }\n}\n\nconst isFirefoxContentScript = typeof wrappedJSObject !== 'undefined';\n\n// remove some internal implementation details, i.e. the \"tokens\" array on the emoji object\n// essentially, convert the emoji from the version stored in IDB to the version used in-memory\nfunction cleanEmoji (emoji) {\n  if (!emoji) {\n    return emoji\n  }\n  // if inside a Firefox content script, need to clone the emoji object to prevent Firefox from complaining about\n  // cross-origin object. See: https://github.com/nolanlawson/emoji-picker-element/issues/356\n  /* istanbul ignore if */\n  if (isFirefoxContentScript) {\n    emoji = structuredClone(emoji);\n  }\n  delete emoji.tokens;\n  if (emoji.skinTones) {\n    const len = emoji.skinTones.length;\n    emoji.skins = Array(len);\n    for (let i = 0; i < len; i++) {\n      emoji.skins[i] = {\n        tone: emoji.skinTones[i],\n        unicode: emoji.skinUnicodes[i],\n        version: emoji.skinVersions[i]\n      };\n    }\n    delete emoji.skinTones;\n    delete emoji.skinUnicodes;\n    delete emoji.skinVersions;\n  }\n  return emoji\n}\n\nfunction warnETag (eTag) {\n  if (!eTag) {\n    console.warn('emoji-picker-element is more efficient if the dataSource server exposes an ETag header.');\n  }\n}\n\nconst requiredKeys = [\n  'annotation',\n  'emoji',\n  'group',\n  'order',\n  'tags',\n  'version'\n];\n\nfunction assertEmojiData (emojiData) {\n  if (!emojiData ||\n    !Array.isArray(emojiData) ||\n    !emojiData[0] ||\n    (typeof emojiData[0] !== 'object') ||\n    requiredKeys.some(key => (!(key in emojiData[0])))) {\n    throw new Error('Emoji data is in the wrong format')\n  }\n}\n\nfunction assertStatus (response, dataSource) {\n  if (Math.floor(response.status / 100) !== 2) {\n    throw new Error('Failed to fetch: ' + dataSource + ':  ' + response.status)\n  }\n}\n\nasync function getETag (dataSource) {\n  const response = await fetch(dataSource, { method: 'HEAD' });\n  assertStatus(response, dataSource);\n  const eTag = response.headers.get('etag');\n  warnETag(eTag);\n  return eTag\n}\n\nasync function getETagAndData (dataSource) {\n  const response = await fetch(dataSource);\n  assertStatus(response, dataSource);\n  const eTag = response.headers.get('etag');\n  warnETag(eTag);\n  const emojiData = await response.json();\n  assertEmojiData(emojiData);\n  return [eTag, emojiData]\n}\n\n// TODO: including these in blob-util.ts causes typedoc to generate docs for them,\n// even with --excludePrivate ¯\\_(ツ)_/¯\n/** @private */\n/**\n * Convert an `ArrayBuffer` to a binary string.\n *\n * Example:\n *\n * ```js\n * var myString = blobUtil.arrayBufferToBinaryString(arrayBuff)\n * ```\n *\n * @param buffer - array buffer\n * @returns binary string\n */\nfunction arrayBufferToBinaryString(buffer) {\n    var binary = '';\n    var bytes = new Uint8Array(buffer);\n    var length = bytes.byteLength;\n    var i = -1;\n    while (++i < length) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return binary;\n}\n/**\n * Convert a binary string to an `ArrayBuffer`.\n *\n * ```js\n * var myBuffer = blobUtil.binaryStringToArrayBuffer(binaryString)\n * ```\n *\n * @param binary - binary string\n * @returns array buffer\n */\nfunction binaryStringToArrayBuffer(binary) {\n    var length = binary.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    var i = -1;\n    while (++i < length) {\n        arr[i] = binary.charCodeAt(i);\n    }\n    return buf;\n}\n\n// generate a checksum based on the stringified JSON\nasync function jsonChecksum (object) {\n  const inString = JSON.stringify(object);\n  const inBuffer = binaryStringToArrayBuffer(inString);\n  // this does not need to be cryptographically secure, SHA-1 is fine\n  const outBuffer = await crypto.subtle.digest('SHA-1', inBuffer);\n  const outBinString = arrayBufferToBinaryString(outBuffer);\n  const res = btoa(outBinString);\n  return res\n}\n\nasync function checkForUpdates (db, dataSource) {\n  // just do a simple HEAD request first to see if the eTags match\n  let emojiData;\n  let eTag = await getETag(dataSource);\n  if (!eTag) { // work around lack of ETag/Access-Control-Expose-Headers\n    const eTagAndData = await getETagAndData(dataSource);\n    eTag = eTagAndData[0];\n    emojiData = eTagAndData[1];\n    if (!eTag) {\n      eTag = await jsonChecksum(emojiData);\n    }\n  }\n  if (await hasData(db, dataSource, eTag)) ; else {\n    if (!emojiData) {\n      const eTagAndData = await getETagAndData(dataSource);\n      emojiData = eTagAndData[1];\n    }\n    await loadData(db, emojiData, dataSource, eTag);\n  }\n}\n\nasync function loadDataForFirstTime (db, dataSource) {\n  let [eTag, emojiData] = await getETagAndData(dataSource);\n  if (!eTag) {\n    // Handle lack of support for ETag or Access-Control-Expose-Headers\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers#Browser_compatibility\n    eTag = await jsonChecksum(emojiData);\n  }\n\n  await loadData(db, emojiData, dataSource, eTag);\n}\n\nclass Database {\n  constructor ({ dataSource = DEFAULT_DATA_SOURCE, locale = DEFAULT_LOCALE, customEmoji = [] } = {}) {\n    this.dataSource = dataSource;\n    this.locale = locale;\n    this._dbName = `emoji-picker-element-${this.locale}`;\n    this._db = undefined;\n    this._lazyUpdate = undefined;\n    this._custom = customEmojiIndex(customEmoji);\n\n    this._clear = this._clear.bind(this);\n    this._ready = this._init();\n  }\n\n  async _init () {\n    const db = this._db = await openDatabase(this._dbName);\n\n    addOnCloseListener(this._dbName, this._clear);\n    const dataSource = this.dataSource;\n    const empty = await isEmpty(db);\n\n    if (empty) {\n      await loadDataForFirstTime(db, dataSource);\n    } else { // offline-first - do an update asynchronously\n      this._lazyUpdate = checkForUpdates(db, dataSource);\n    }\n  }\n\n  async ready () {\n    const checkReady = async () => {\n      if (!this._ready) {\n        this._ready = this._init();\n      }\n      return this._ready\n    };\n    await checkReady();\n    // There's a possibility of a race condition where the element gets added, removed, and then added again\n    // with a particular timing, which would set the _db to undefined.\n    // We *could* do a while loop here, but that seems excessive and could lead to an infinite loop.\n    if (!this._db) {\n      await checkReady();\n    }\n  }\n\n  async getEmojiByGroup (group) {\n    assertNumber(group);\n    await this.ready();\n    return uniqEmoji(await getEmojiByGroup(this._db, group)).map(cleanEmoji)\n  }\n\n  async getEmojiBySearchQuery (query) {\n    assertNonEmptyString(query);\n    await this.ready();\n    const customs = this._custom.search(query);\n    const natives = uniqEmoji(await getEmojiBySearchQuery(this._db, query)).map(cleanEmoji);\n    return [\n      ...customs,\n      ...natives\n    ]\n  }\n\n  async getEmojiByShortcode (shortcode) {\n    assertNonEmptyString(shortcode);\n    await this.ready();\n    const custom = this._custom.byShortcode(shortcode);\n    if (custom) {\n      return custom\n    }\n    return cleanEmoji(await getEmojiByShortcode(this._db, shortcode))\n  }\n\n  async getEmojiByUnicodeOrName (unicodeOrName) {\n    assertNonEmptyString(unicodeOrName);\n    await this.ready();\n    const custom = this._custom.byName(unicodeOrName);\n    if (custom) {\n      return custom\n    }\n    return cleanEmoji(await getEmojiByUnicode(this._db, unicodeOrName))\n  }\n\n  async getPreferredSkinTone () {\n    await this.ready();\n    return (await get(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE)) || 0\n  }\n\n  async setPreferredSkinTone (skinTone) {\n    assertNumber(skinTone);\n    await this.ready();\n    return set(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE, skinTone)\n  }\n\n  async incrementFavoriteEmojiCount (unicodeOrName) {\n    assertNonEmptyString(unicodeOrName);\n    await this.ready();\n    return incrementFavoriteEmojiCount(this._db, unicodeOrName)\n  }\n\n  async getTopFavoriteEmoji (limit) {\n    assertNumber(limit);\n    await this.ready();\n    return (await getTopFavoriteEmoji(this._db, this._custom, limit)).map(cleanEmoji)\n  }\n\n  set customEmoji (customEmojis) {\n    this._custom = customEmojiIndex(customEmojis);\n  }\n\n  get customEmoji () {\n    return this._custom.all\n  }\n\n  async _shutdown () {\n    await this.ready(); // reopen if we've already been closed/deleted\n    try {\n      await this._lazyUpdate; // allow any lazy updates to process before closing/deleting\n    } catch (err) { /* ignore network errors (offline-first) */ }\n  }\n\n  // clear references to IDB, e.g. during a close event\n  _clear () {\n    // We don't need to call removeEventListener or remove the manual \"close\" listeners.\n    // The memory leak tests prove this is unnecessary. It's because:\n    // 1) IDBDatabases that can no longer fire \"close\" automatically have listeners GCed\n    // 2) we clear the manual close listeners in databaseLifecycle.js.\n    this._db = this._ready = this._lazyUpdate = undefined;\n  }\n\n  async close () {\n    await this._shutdown();\n    await closeDatabase(this._dbName);\n  }\n\n  async delete () {\n    await this._shutdown();\n    await deleteDatabase(this._dbName);\n  }\n}\n\nexport { Database as default };\n", "import Database from './database.js';\n\n// via https://unpkg.com/browse/emojibase-data@6.0.0/meta/groups.json\nconst allGroups = [\n  [-1, '✨', 'custom'],\n  [0, '😀', 'smileys-emotion'],\n  [1, '👋', 'people-body'],\n  [3, '🐱', 'animals-nature'],\n  [4, '🍎', 'food-drink'],\n  [5, '🏠️', 'travel-places'],\n  [6, '⚽', 'activities'],\n  [7, '📝', 'objects'],\n  [8, '⛔️', 'symbols'],\n  [9, '🏁', 'flags']\n].map(([id, emoji, name]) => ({ id, emoji, name }));\n\nconst groups = allGroups.slice(1);\n\nconst MIN_SEARCH_TEXT_LENGTH = 2;\nconst NUM_SKIN_TONES = 6;\n\n/* istanbul ignore next */\nconst rIC = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n\n// check for ZWJ (zero width joiner) character\nfunction hasZwj (emoji) {\n  return emoji.unicode.includes('\\u200d')\n}\n\n// Find one good representative emoji from each version to test by checking its color.\n// Ideally it should have color in the center. For some inspiration, see:\n// https://about.gitlab.com/blog/2018/05/30/journey-in-native-unicode-emoji/\n//\n// Note that for certain versions (12.1, 13.1), there is no point in testing them explicitly, because\n// all the emoji from this version are compound-emoji from previous versions. So they would pass a color\n// test, even in browsers that display them as double emoji. (E.g. \"face in clouds\" might render as\n// \"face without mouth\" plus \"fog\".) These emoji can only be filtered using the width test,\n// which happens in checkZwjSupport.js.\nconst versionsAndTestEmoji = {\n  '🫨': 15.1, // shaking head, technically from v15 but see note above\n  '🫠': 14,\n  '🥲': 13.1, // smiling face with tear, technically from v13 but see note above\n  '🥻': 12.1, // sari, technically from v12 but see note above\n  '🥰': 11,\n  '🤩': 5,\n  '👱‍♀️': 4,\n  '🤣': 3,\n  '👁️‍🗨️': 2,\n  '😀': 1,\n  '😐️': 0.7,\n  '😃': 0.6\n};\n\nconst TIMEOUT_BEFORE_LOADING_MESSAGE = 1000; // 1 second\nconst DEFAULT_SKIN_TONE_EMOJI = '🖐️';\nconst DEFAULT_NUM_COLUMNS = 8;\n\n// Based on https://fivethirtyeight.com/features/the-100-most-used-emojis/ and\n// https://blog.emojipedia.org/facebook-reveals-most-and-least-used-emojis/ with\n// a bit of my own curation. (E.g. avoid the \"OK\" gesture because of connotations:\n// https://emojipedia.org/ok-hand/)\nconst MOST_COMMONLY_USED_EMOJI = [\n  '😊',\n  '😒',\n  '❤️',\n  '👍️',\n  '😍',\n  '😂',\n  '😭',\n  '☺️',\n  '😔',\n  '😩',\n  '😏',\n  '💕',\n  '🙌',\n  '😘'\n];\n\n// It's important to list Twemoji Mozilla before everything else, because Mozilla bundles their\n// own font on some platforms (notably Windows and Linux as of this writing). Typically, Mozilla\n// updates faster than the underlying OS, and we don't want to render older emoji in one font and\n// newer emoji in another font:\n// https://github.com/nolanlawson/emoji-picker-element/pull/268#issuecomment-1073347283\nconst FONT_FAMILY = '\"Twemoji Mozilla\",\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",' +\n  '\"Noto Color Emoji\",\"EmojiOne Color\",\"Android Emoji\",sans-serif';\n\n/* istanbul ignore next */\nconst DEFAULT_CATEGORY_SORTING = (a, b) => a < b ? -1 : a > b ? 1 : 0;\n\n// Test if an emoji is supported by rendering it to canvas and checking that the color is not black\n// See https://about.gitlab.com/blog/2018/05/30/journey-in-native-unicode-emoji/\n// and https://www.npmjs.com/package/if-emoji for inspiration\n// This implementation is largely borrowed from if-emoji, adding the font-family\n\n\nconst getTextFeature = (text, color) => {\n  const canvas = document.createElement('canvas');\n  canvas.width = canvas.height = 1;\n\n  const ctx = canvas.getContext('2d');\n  ctx.textBaseline = 'top';\n  ctx.font = `100px ${FONT_FAMILY}`;\n  ctx.fillStyle = color;\n  ctx.scale(0.01, 0.01);\n  ctx.fillText(text, 0, 0);\n\n  return ctx.getImageData(0, 0, 1, 1).data\n};\n\nconst compareFeatures = (feature1, feature2) => {\n  const feature1Str = [...feature1].join(',');\n  const feature2Str = [...feature2].join(',');\n  // This is RGBA, so for 0,0,0, we are checking that the first RGB is not all zeroes.\n  // Most of the time when unsupported this is 0,0,0,0, but on Chrome on Mac it is\n  // 0,0,0,61 - there is a transparency here.\n  return feature1Str === feature2Str && !feature1Str.startsWith('0,0,0,')\n};\n\nfunction testColorEmojiSupported (text) {\n  // Render white and black and then compare them to each other and ensure they're the same\n  // color, and neither one is black. This shows that the emoji was rendered in color.\n  const feature1 = getTextFeature(text, '#000');\n  const feature2 = getTextFeature(text, '#fff');\n  return feature1 && feature2 && compareFeatures(feature1, feature2)\n}\n\n// rather than check every emoji ever, which would be expensive, just check some representatives from the\n// different emoji releases to determine what the font supports\n\nfunction determineEmojiSupportLevel () {\n  const entries = Object.entries(versionsAndTestEmoji);\n  try {\n    // start with latest emoji and work backwards\n    for (const [emoji, version] of entries) {\n      if (testColorEmojiSupported(emoji)) {\n        return version\n      }\n    }\n  } catch (e) { // canvas error\n  } finally {\n  }\n  // In case of an error, be generous and just assume all emoji are supported (e.g. for canvas errors\n  // due to anti-fingerprinting add-ons). Better to show some gray boxes than nothing at all.\n  return entries[0][1] // first one in the list is the most recent version\n}\n\n// Check which emojis we know for sure aren't supported, based on Unicode version level\nlet promise;\nconst detectEmojiSupportLevel = () => {\n  if (!promise) {\n    // Delay so it can run while the IDB database is being created by the browser (on another thread).\n    // This helps especially with first load – we want to start pre-populating the database on the main thread,\n    // and then wait for IDB to commit everything, and while waiting we run this check.\n    promise = new Promise(resolve => (\n      rIC(() => (\n        resolve(determineEmojiSupportLevel()) // delay so ideally this can run while IDB is first populating\n      ))\n    ));\n  }\n  return promise\n};\n// determine which emojis containing ZWJ (zero width joiner) characters\n// are supported (rendered as one glyph) rather than unsupported (rendered as two or more glyphs)\nconst supportedZwjEmojis = new Map();\n\nconst VARIATION_SELECTOR = '\\ufe0f';\nconst SKINTONE_MODIFIER = '\\ud83c';\nconst ZWJ = '\\u200d';\nconst LIGHT_SKIN_TONE = 0x1F3FB;\nconst LIGHT_SKIN_TONE_MODIFIER = 0xdffb;\n\n// TODO: this is a naive implementation, we can improve it later\n// It's only used for the skintone picker, so as long as people don't customize with\n// really exotic emoji then it should work fine\nfunction applySkinTone (str, skinTone) {\n  if (skinTone === 0) {\n    return str\n  }\n  const zwjIndex = str.indexOf(ZWJ);\n  if (zwjIndex !== -1) {\n    return str.substring(0, zwjIndex) +\n      String.fromCodePoint(LIGHT_SKIN_TONE + skinTone - 1) +\n      str.substring(zwjIndex)\n  }\n  if (str.endsWith(VARIATION_SELECTOR)) {\n    str = str.substring(0, str.length - 1);\n  }\n  return str + SKINTONE_MODIFIER + String.fromCodePoint(LIGHT_SKIN_TONE_MODIFIER + skinTone - 1)\n}\n\nfunction halt (event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\n// Implementation left/right or up/down navigation, circling back when you\n// reach the start/end of the list\nfunction incrementOrDecrement (decrement, val, arr) {\n  val += (decrement ? -1 : 1);\n  if (val < 0) {\n    val = arr.length - 1;\n  } else if (val >= arr.length) {\n    val = 0;\n  }\n  return val\n}\n\n// like lodash's uniqBy but much smaller\nfunction uniqBy (arr, func) {\n  const set = new Set();\n  const res = [];\n  for (const item of arr) {\n    const key = func(item);\n    if (!set.has(key)) {\n      set.add(key);\n      res.push(item);\n    }\n  }\n  return res\n}\n\n// We don't need all the data on every emoji, and there are specific things we need\n// for the UI, so build a \"view model\" from the emoji object we got from the database\n\nfunction summarizeEmojisForUI (emojis, emojiSupportLevel) {\n  const toSimpleSkinsMap = skins => {\n    const res = {};\n    for (const skin of skins) {\n      // ignore arrays like [1, 2] with multiple skin tones\n      // also ignore variants that are in an unsupported emoji version\n      // (these do exist - variants from a different version than their base emoji)\n      if (typeof skin.tone === 'number' && skin.version <= emojiSupportLevel) {\n        res[skin.tone] = skin.unicode;\n      }\n    }\n    return res\n  };\n\n  return emojis.map(({ unicode, skins, shortcodes, url, name, category, annotation }) => ({\n    unicode,\n    name,\n    shortcodes,\n    url,\n    category,\n    annotation,\n    id: unicode || name,\n    skins: skins && toSimpleSkinsMap(skins)\n  }))\n}\n\n// import rAF from one place so that the bundle size is a bit smaller\nconst rAF = requestAnimationFrame;\n\n// Svelte action to calculate the width of an element and auto-update\n// using ResizeObserver. If ResizeObserver is unsupported, we just use rAF once\n// and don't bother to update.\n\n\nlet resizeObserverSupported = typeof ResizeObserver === 'function';\n\nfunction calculateWidth (node, abortSignal, onUpdate) {\n  let resizeObserver;\n  if (resizeObserverSupported) {\n    resizeObserver = new ResizeObserver(entries => (\n      onUpdate(entries[0].contentRect.width)\n    ));\n    resizeObserver.observe(node);\n  } else { // just set the width once, don't bother trying to track it\n    rAF(() => (\n      onUpdate(node.getBoundingClientRect().width)\n    ));\n  }\n\n  // cleanup function (called on destroy)\n  abortSignal.addEventListener('abort', () => {\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n    }\n  });\n}\n\n// get the width of the text inside of a DOM node, via https://stackoverflow.com/a/59525891/680742\nfunction calculateTextWidth (node) {\n  /* istanbul ignore else */\n  {\n    const range = document.createRange();\n    range.selectNode(node.firstChild);\n    return range.getBoundingClientRect().width\n  }\n}\n\nlet baselineEmojiWidth;\n\nfunction checkZwjSupport (zwjEmojisToCheck, baselineEmoji, emojiToDomNode) {\n  for (const emoji of zwjEmojisToCheck) {\n    const domNode = emojiToDomNode(emoji);\n    const emojiWidth = calculateTextWidth(domNode);\n    if (typeof baselineEmojiWidth === 'undefined') { // calculate the baseline emoji width only once\n      baselineEmojiWidth = calculateTextWidth(baselineEmoji);\n    }\n    // On Windows, some supported emoji are ~50% bigger than the baseline emoji, but what we really want to guard\n    // against are the ones that are 2x the size, because those are truly broken (person with red hair = person with\n    // floating red wig, black cat = cat with black square, polar bear = bear with snowflake, etc.)\n    // So here we set the threshold at 1.8 times the size of the baseline emoji.\n    const supported = emojiWidth / 1.8 < baselineEmojiWidth;\n    supportedZwjEmojis.set(emoji.unicode, supported);\n  }\n}\n\n// like lodash's uniq\n\nfunction uniq (arr) {\n  return uniqBy(arr, _ => _)\n}\n\n// Note we put this in its own function outside Picker.js to avoid Svelte doing an invalidation on the \"setter\" here.\n// At best the invalidation is useless, at worst it can cause infinite loops:\n// https://github.com/nolanlawson/emoji-picker-element/pull/180\n// https://github.com/sveltejs/svelte/issues/6521\n// Also note tabpanelElement can be null if the element is disconnected immediately after connected\nfunction resetScrollTopIfPossible (element) {\n  /* istanbul ignore else */\n  if (element) { // Makes me nervous not to have this `if` guard\n    element.scrollTop = 0;\n  }\n}\n\nfunction getFromMap (cache, key, func) {\n  let cached = cache.get(key);\n  if (!cached) {\n    cached = func();\n    cache.set(key, cached);\n  }\n  return cached\n}\n\nfunction toString (value) {\n  return '' + value\n}\n\nfunction parseTemplate (htmlString) {\n  const template = document.createElement('template');\n  template.innerHTML = htmlString;\n  return template\n}\n\nconst parseCache = new WeakMap();\nconst domInstancesCache = new WeakMap();\nconst unkeyedSymbol = Symbol('un-keyed');\n\n// Not supported in Safari <=13\nconst hasReplaceChildren = 'replaceChildren' in Element.prototype;\nfunction replaceChildren (parentNode, newChildren) {\n  /* istanbul ignore else */\n  if (hasReplaceChildren) {\n    parentNode.replaceChildren(...newChildren);\n  } else { // minimal polyfill for Element.prototype.replaceChildren\n    parentNode.innerHTML = '';\n    parentNode.append(...newChildren);\n  }\n}\n\nfunction doChildrenNeedRerender (parentNode, newChildren) {\n  let oldChild = parentNode.firstChild;\n  let oldChildrenCount = 0;\n  // iterate using firstChild/nextSibling because browsers use a linked list under the hood\n  while (oldChild) {\n    const newChild = newChildren[oldChildrenCount];\n    // check if the old child and new child are the same\n    if (newChild !== oldChild) {\n      return true\n    }\n    oldChild = oldChild.nextSibling;\n    oldChildrenCount++;\n  }\n  // if new children length is different from old, we must re-render\n  return oldChildrenCount !== newChildren.length\n}\n\nfunction patchChildren (newChildren, instanceBinding) {\n  const { targetNode } = instanceBinding;\n  let { targetParentNode } = instanceBinding;\n\n  let needsRerender = false;\n\n  if (targetParentNode) { // already rendered once\n    needsRerender = doChildrenNeedRerender(targetParentNode, newChildren);\n  } else { // first render of list\n    needsRerender = true;\n    instanceBinding.targetNode = undefined; // placeholder comment not needed anymore, free memory\n    instanceBinding.targetParentNode = targetParentNode = targetNode.parentNode;\n  }\n  // avoid re-rendering list if the dom nodes are exactly the same before and after\n  if (needsRerender) {\n    replaceChildren(targetParentNode, newChildren);\n  }\n}\n\nfunction patch (expressions, instanceBindings) {\n  for (const instanceBinding of instanceBindings) {\n    const {\n      targetNode,\n      currentExpression,\n      binding: {\n        expressionIndex,\n        attributeName,\n        attributeValuePre,\n        attributeValuePost\n      }\n    } = instanceBinding;\n\n    const expression = expressions[expressionIndex];\n\n    if (currentExpression === expression) {\n      // no need to update, same as before\n      continue\n    }\n\n    instanceBinding.currentExpression = expression;\n\n    if (attributeName) { // attribute replacement\n      targetNode.setAttribute(attributeName, attributeValuePre + toString(expression) + attributeValuePost);\n    } else { // text node / child element / children replacement\n      let newNode;\n      if (Array.isArray(expression)) { // array of DOM elements produced by tag template literals\n        patchChildren(expression, instanceBinding);\n      } else if (expression instanceof Element) { // html tag template returning a DOM element\n        newNode = expression;\n        targetNode.replaceWith(newNode);\n      } else { // primitive - string, number, etc\n        if (targetNode.nodeType === Node.TEXT_NODE) { // already transformed into a text node\n          // nodeValue is faster than textContent supposedly https://www.youtube.com/watch?v=LY6y3HbDVmg\n          targetNode.nodeValue = toString(expression);\n        } else { // replace comment or whatever was there before with a text node\n          newNode = document.createTextNode(toString(expression));\n          targetNode.replaceWith(newNode);\n        }\n      }\n      if (newNode) {\n        instanceBinding.targetNode = newNode;\n      }\n    }\n  }\n}\n\nfunction parse (tokens) {\n  let htmlString = '';\n\n  let withinTag = false;\n  let withinAttribute = false;\n  let elementIndexCounter = -1; // depth-first traversal order\n\n  const elementsToBindings = new Map();\n  const elementIndexes = [];\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const token = tokens[i];\n    htmlString += token;\n\n    if (i === len - 1) {\n      break // no need to process characters - no more expressions to be found\n    }\n\n    for (let j = 0; j < token.length; j++) {\n      const char = token.charAt(j);\n      switch (char) {\n        case '<': {\n          const nextChar = token.charAt(j + 1);\n          if (nextChar === '/') { // closing tag\n            // leaving an element\n            elementIndexes.pop();\n          } else { // not a closing tag\n            withinTag = true;\n            elementIndexes.push(++elementIndexCounter);\n          }\n          break\n        }\n        case '>': {\n          withinTag = false;\n          withinAttribute = false;\n          break\n        }\n        case '=': {\n          withinAttribute = true;\n          break\n        }\n      }\n    }\n\n    const elementIndex = elementIndexes[elementIndexes.length - 1];\n    const bindings = getFromMap(elementsToBindings, elementIndex, () => []);\n\n    let attributeName;\n    let attributeValuePre;\n    let attributeValuePost;\n    if (withinAttribute) {\n      // I never use single-quotes for attribute values in HTML, so just support double-quotes or no-quotes\n      const match = /(\\S+)=\"?([^\"=]*)$/.exec(token);\n      attributeName = match[1];\n      attributeValuePre = match[2];\n      attributeValuePost = /^[^\">]*/.exec(tokens[i + 1])[0];\n    }\n\n    const binding = {\n      attributeName,\n      attributeValuePre,\n      attributeValuePost,\n      expressionIndex: i\n    };\n\n    bindings.push(binding);\n\n    // add a placeholder comment that we can find later\n    htmlString += (!withinTag && !withinAttribute) ? `<!--${bindings.length - 1}-->` : '';\n  }\n\n  const template = parseTemplate(htmlString);\n\n  return {\n    template,\n    elementsToBindings\n  }\n}\n\nfunction findPlaceholderComment (element, bindingId) {\n  // If we had a lot of placeholder comments to find, it would make more sense to build up a map once\n  // rather than search the DOM every time. But it turns out that we always only have one child,\n  // and it's the comment node, so searching every time is actually faster.\n  let childNode = element.firstChild;\n  while (childNode) {\n    // Note that minify-html-literals has already removed all non-framework comments\n    // So we just need to look for comments that have exactly the bindingId as its text content\n    if (childNode.nodeType === Node.COMMENT_NODE && childNode.nodeValue === toString(bindingId)) {\n      return childNode\n    }\n    childNode = childNode.nextSibling;\n  }\n}\n\nfunction traverseAndSetupBindings (dom, elementsToBindings) {\n  const instanceBindings = [];\n  // traverse dom\n  const treeWalker = document.createTreeWalker(dom, NodeFilter.SHOW_ELEMENT);\n\n  let element = dom;\n  let elementIndex = -1;\n  do {\n    const bindings = elementsToBindings.get(++elementIndex);\n    if (bindings) {\n      for (let i = 0; i < bindings.length; i++) {\n        const binding = bindings[i];\n\n        const targetNode = binding.attributeName\n          ? element // attribute binding, just use the element itself\n          : findPlaceholderComment(element, i); // not an attribute binding, so has a placeholder comment\n\n        const instanceBinding = {\n          binding,\n          targetNode,\n          targetParentNode: undefined,\n          currentExpression: undefined\n        };\n\n        instanceBindings.push(instanceBinding);\n      }\n    }\n  } while ((element = treeWalker.nextNode()))\n\n  return instanceBindings\n}\n\nfunction parseHtml (tokens) {\n  // All templates and bound expressions are unique per tokens array\n  const { template, elementsToBindings } = getFromMap(parseCache, tokens, () => parse(tokens));\n\n  // When we parseHtml, we always return a fresh DOM instance ready to be updated\n  const dom = template.cloneNode(true).content.firstElementChild;\n  const instanceBindings = traverseAndSetupBindings(dom, elementsToBindings);\n\n  return function updateDomInstance (expressions) {\n    patch(expressions, instanceBindings);\n    return dom\n  }\n}\n\nfunction createFramework (state) {\n  const domInstances = getFromMap(domInstancesCache, state, () => new Map());\n  let domInstanceCacheKey = unkeyedSymbol;\n\n  function html (tokens, ...expressions) {\n    // Each unique lexical usage of map() is considered unique due to the html`` tagged template call it makes,\n    // which has lexically unique tokens. The unkeyed symbol is just used for html`` usage outside of a map().\n    const domInstancesForTokens = getFromMap(domInstances, tokens, () => new Map());\n    const updateDomInstance = getFromMap(domInstancesForTokens, domInstanceCacheKey, () => parseHtml(tokens));\n\n    return updateDomInstance(expressions) // update with expressions\n  }\n\n  function map (array, callback, keyFunction) {\n    return array.map((item, index) => {\n      const originalCacheKey = domInstanceCacheKey;\n      domInstanceCacheKey = keyFunction(item);\n      try {\n        return callback(item, index)\n      } finally {\n        domInstanceCacheKey = originalCacheKey;\n      }\n    })\n  }\n\n  return { map, html }\n}\n\nfunction render (container, state, helpers, events, actions, refs, abortSignal, firstRender) {\n  const { labelWithSkin, titleForEmoji, unicodeWithSkin } = helpers;\n  const { html, map } = createFramework(state);\n\n  function emojiList (emojis, searchMode, prefix) {\n    return map(emojis, (emoji, i) => {\n      return html`<button role=\"${searchMode ? 'option' : 'menuitem'}\" aria-selected=\"${state.searchMode ? i === state.activeSearchItem : ''}\" aria-label=\"${labelWithSkin(emoji, state.currentSkinTone)}\" title=\"${titleForEmoji(emoji)}\" class=\"emoji ${searchMode && i === state.activeSearchItem ? 'active' : ''}\" id=\"${`${prefix}-${emoji.id}`}\">${\n        emoji.unicode\n          ? unicodeWithSkin(emoji, state.currentSkinTone)\n          : html`<img class=\"custom-emoji\" src=\"${emoji.url}\" alt=\"\" loading=\"lazy\">`\n      }</button>`\n      // It's important for the cache key to be unique based on the prefix, because the framework caches based on the\n      // unique tokens + cache key, and the same emoji may be used in the tab as well as in the fav bar\n    }, emoji => `${prefix}-${emoji.id}`)\n  }\n\n  const section = () => {\n    return html`<section data-ref=\"rootElement\" class=\"picker\" aria-label=\"${state.i18n.regionLabel}\" style=\"${state.pickerStyle}\"><div class=\"pad-top\"></div><div class=\"search-row\"><div class=\"search-wrapper\"><input id=\"search\" class=\"search\" type=\"search\" role=\"combobox\" enterkeyhint=\"search\" placeholder=\"${state.i18n.searchLabel}\" autocapitalize=\"none\" autocomplete=\"off\" spellcheck=\"true\" aria-expanded=\"${!!(state.searchMode && state.currentEmojis.length)}\" aria-controls=\"search-results\" aria-describedby=\"search-description\" aria-autocomplete=\"list\" aria-activedescendant=\"${state.activeSearchItemId ? `emo-${state.activeSearchItemId}` : ''}\" data-ref=\"searchElement\" data-on-input=\"onSearchInput\" data-on-keydown=\"onSearchKeydown\"><label class=\"sr-only\" for=\"search\">${state.i18n.searchLabel}</label> <span id=\"search-description\" class=\"sr-only\">${state.i18n.searchDescription}</span></div><div class=\"skintone-button-wrapper ${state.skinTonePickerExpandedAfterAnimation ? 'expanded' : ''}\"><button id=\"skintone-button\" class=\"emoji ${state.skinTonePickerExpanded ? 'hide-focus' : ''}\" aria-label=\"${state.skinToneButtonLabel}\" title=\"${state.skinToneButtonLabel}\" aria-describedby=\"skintone-description\" aria-haspopup=\"listbox\" aria-expanded=\"${state.skinTonePickerExpanded}\" aria-controls=\"skintone-list\" data-on-click=\"onClickSkinToneButton\">${state.skinToneButtonText}</button></div><span id=\"skintone-description\" class=\"sr-only\">${state.i18n.skinToneDescription}</span><div data-ref=\"skinToneDropdown\" id=\"skintone-list\" class=\"skintone-list hide-focus ${state.skinTonePickerExpanded ? '' : 'hidden no-animate'}\" style=\"transform:translateY(${state.skinTonePickerExpanded ? 0 : 'calc(-1 * var(--num-skintones) * var(--total-emoji-size))'})\" role=\"listbox\" aria-label=\"${state.i18n.skinTonesLabel}\" aria-activedescendant=\"skintone-${state.activeSkinTone}\" aria-hidden=\"${!state.skinTonePickerExpanded}\" tabIndex=\"-1\" data-on-focusout=\"onSkinToneOptionsFocusOut\" data-on-click=\"onSkinToneOptionsClick\" data-on-keydown=\"onSkinToneOptionsKeydown\" data-on-keyup=\"onSkinToneOptionsKeyup\">${\n    map(state.skinTones, (skinTone, i) => {\n    return html`<div id=\"skintone-${i}\" class=\"emoji ${i === state.activeSkinTone ? 'active' : ''}\" aria-selected=\"${i === state.activeSkinTone}\" role=\"option\" title=\"${state.i18n.skinTones[i]}\" aria-label=\"${state.i18n.skinTones[i]}\">${skinTone}</div>`\n    }, skinTone => skinTone)\n        }</div></div><div class=\"nav\" role=\"tablist\" style=\"grid-template-columns:repeat(${state.groups.length},1fr)\" aria-label=\"${state.i18n.categoriesLabel}\" data-on-keydown=\"onNavKeydown\" data-on-click=\"onNavClick\">${\n            map(state.groups, (group) => {\n              return html`<button role=\"tab\" class=\"nav-button\" aria-controls=\"tab-${group.id}\" aria-label=\"${state.i18n.categories[group.name]}\" aria-selected=\"${!state.searchMode && state.currentGroup.id === group.id}\" title=\"${state.i18n.categories[group.name]}\" data-group-id=\"${group.id}\"><div class=\"nav-emoji emoji\">${group.emoji}</div></button>`\n            }, group => group.id)\n          }</div><div class=\"indicator-wrapper\"><div class=\"indicator\" style=\"transform:translateX(${(/* istanbul ignore next */ (state.isRtl ? -1 : 1)) * state.currentGroupIndex * 100}%)\"></div></div><div class=\"message ${state.message ? '' : 'gone'}\" role=\"alert\" aria-live=\"polite\">${state.message}</div><div data-ref=\"tabpanelElement\" class=\"tabpanel ${(!state.databaseLoaded || state.message) ? 'gone' : ''}\" role=\"${state.searchMode ? 'region' : 'tabpanel'}\" aria-label=\"${state.searchMode ? state.i18n.searchResultsLabel : state.i18n.categories[state.currentGroup.name]}\" id=\"${state.searchMode ? '' : `tab-${state.currentGroup.id}`}\" tabIndex=\"0\" data-on-click=\"onEmojiClick\"><div data-action=\"calculateEmojiGridStyle\">${\n              map(state.currentEmojisWithCategories, (emojiWithCategory, i) => {\n                return html`<div><div id=\"menu-label-${i}\" class=\"category ${state.currentEmojisWithCategories.length === 1 && state.currentEmojisWithCategories[0].category === '' ? 'gone' : ''}\" aria-hidden=\"true\">${\n                  state.searchMode\n                    ? state.i18n.searchResultsLabel\n                    : (\n                      emojiWithCategory.category\n                        ? emojiWithCategory.category\n                        : (\n                          state.currentEmojisWithCategories.length > 1\n                            ? state.i18n.categories.custom\n                            : state.i18n.categories[state.currentGroup.name]\n                        )\n                    )\n                }</div><div class=\"emoji-menu\" role=\"${state.searchMode ? 'listbox' : 'menu'}\" aria-labelledby=\"menu-label-${i}\" id=\"${state.searchMode ? 'search-results' : ''}\">${\n              emojiList(emojiWithCategory.emojis, state.searchMode, /* prefix */ 'emo')\n            }</div></div>`\n              }, emojiWithCategory => emojiWithCategory.category)\n            }</div></div><div class=\"favorites emoji-menu ${state.message ? 'gone' : ''}\" role=\"menu\" aria-label=\"${state.i18n.favoritesLabel}\" style=\"padding-inline-end:${`${state.scrollbarWidth}px`}\" data-on-click=\"onEmojiClick\">${\n            emojiList(state.currentFavorites, /* searchMode */ false, /* prefix */ 'fav')\n          }</div><button data-ref=\"baselineEmoji\" aria-hidden=\"true\" tabindex=\"-1\" class=\"abs-pos hidden emoji baseline-emoji\">😀</button></section>`\n  };\n\n  const rootDom = section();\n\n  if (firstRender) { // not a re-render\n    container.appendChild(rootDom);\n\n    // we only bind events/refs/actions once - there is no need to find them again given this component structure\n\n    // helper for traversing the dom, finding elements by an attribute, and getting the attribute value\n    const forElementWithAttribute = (attributeName, callback) => {\n      for (const element of container.querySelectorAll(`[${attributeName}]`)) {\n        callback(element, element.getAttribute(attributeName));\n      }\n    };\n\n    // bind events\n    for (const eventName of ['click', 'focusout', 'input', 'keydown', 'keyup']) {\n      forElementWithAttribute(`data-on-${eventName}`, (element, listenerName) => {\n        element.addEventListener(eventName, events[listenerName]);\n      });\n    }\n\n    // find refs\n    forElementWithAttribute('data-ref', (element, ref) => {\n      refs[ref] = element;\n    });\n\n    // set up actions\n    forElementWithAttribute('data-action', (element, action) => {\n      actions[action](element);\n    });\n\n    // destroy/abort logic\n    abortSignal.addEventListener('abort', () => {\n      container.removeChild(rootDom);\n    });\n  }\n}\n\n/* istanbul ignore next */\nconst qM = typeof queueMicrotask === 'function' ? queueMicrotask : callback => Promise.resolve().then(callback);\n\nfunction createState (abortSignal) {\n  let destroyed = false;\n  let currentObserver;\n\n  const propsToObservers = new Map();\n  const dirtyObservers = new Set();\n\n  let queued;\n\n  const flush = () => {\n    if (destroyed) {\n      return\n    }\n    const observersToRun = [...dirtyObservers];\n    dirtyObservers.clear(); // clear before running to force any new updates to run in another tick of the loop\n    try {\n      for (const observer of observersToRun) {\n        observer();\n      }\n    } finally {\n      queued = false;\n      if (dirtyObservers.size) { // new updates, queue another one\n        queued = true;\n        qM(flush);\n      }\n    }\n  };\n\n  const state = new Proxy({}, {\n    get (target, prop) {\n      // console.log('reactivity: get', prop)\n      if (currentObserver) {\n        let observers = propsToObservers.get(prop);\n        if (!observers) {\n          observers = new Set();\n          propsToObservers.set(prop, observers);\n        }\n        observers.add(currentObserver);\n      }\n      return target[prop]\n    },\n    set (target, prop, newValue) {\n      // console.log('reactivity: set', prop, newValue)\n      target[prop] = newValue;\n      const observers = propsToObservers.get(prop);\n      if (observers) {\n        for (const observer of observers) {\n          dirtyObservers.add(observer);\n        }\n        if (!queued) {\n          queued = true;\n          qM(flush);\n        }\n      }\n      return true\n    }\n  });\n\n  const createEffect = (callback) => {\n    const runnable = () => {\n      const oldObserver = currentObserver;\n      currentObserver = runnable;\n      try {\n        return callback()\n      } finally {\n        currentObserver = oldObserver;\n      }\n    };\n    return runnable()\n  };\n\n  // destroy logic\n  abortSignal.addEventListener('abort', () => {\n    destroyed = true;\n  });\n\n  return {\n    state,\n    createEffect\n  }\n}\n\n// Compare two arrays, with a function called on each item in the two arrays that returns true if the items are equal\nfunction arraysAreEqualByFunction (left, right, areEqualFunc) {\n  if (left.length !== right.length) {\n    return false\n  }\n  for (let i = 0; i < left.length; i++) {\n    if (!areEqualFunc(left[i], right[i])) {\n      return false\n    }\n  }\n  return true\n}\n\n/* eslint-disable prefer-const,no-labels,no-inner-declarations */\n\n// constants\nconst EMPTY_ARRAY = [];\n\nconst { assign } = Object;\n\nfunction createRoot (shadowRoot, props) {\n  const refs = {};\n  const abortController = new AbortController();\n  const abortSignal = abortController.signal;\n  const { state, createEffect } = createState(abortSignal);\n\n  // initial state\n  assign(state, {\n    skinToneEmoji: undefined,\n    i18n: undefined,\n    database: undefined,\n    customEmoji: undefined,\n    customCategorySorting: undefined,\n    emojiVersion: undefined\n  });\n\n  // public props\n  assign(state, props);\n\n  // private props\n  assign(state, {\n    initialLoad: true,\n    currentEmojis: [],\n    currentEmojisWithCategories: [],\n    rawSearchText: '',\n    searchText: '',\n    searchMode: false,\n    activeSearchItem: -1,\n    message: undefined,\n    skinTonePickerExpanded: false,\n    skinTonePickerExpandedAfterAnimation: false,\n    currentSkinTone: 0,\n    activeSkinTone: 0,\n    skinToneButtonText: undefined,\n    pickerStyle: undefined,\n    skinToneButtonLabel: '',\n    skinTones: [],\n    currentFavorites: [],\n    defaultFavoriteEmojis: undefined,\n    numColumns: DEFAULT_NUM_COLUMNS,\n    isRtl: false,\n    scrollbarWidth: 0,\n    currentGroupIndex: 0,\n    groups: groups,\n    databaseLoaded: false,\n    activeSearchItemId: undefined\n  });\n\n  //\n  // Update the current group based on the currentGroupIndex\n  //\n  createEffect(() => {\n    if (state.currentGroup !== state.groups[state.currentGroupIndex]) {\n      state.currentGroup = state.groups[state.currentGroupIndex];\n    }\n  });\n\n  //\n  // Utils/helpers\n  //\n\n  const focus = id => {\n    shadowRoot.getElementById(id).focus();\n  };\n\n  const emojiToDomNode = emoji => shadowRoot.getElementById(`emo-${emoji.id}`);\n\n  // fire a custom event that crosses the shadow boundary\n  const fireEvent = (name, detail) => {\n    refs.rootElement.dispatchEvent(new CustomEvent(name, {\n      detail,\n      bubbles: true,\n      composed: true\n    }));\n  };\n\n  //\n  // Comparison utils\n  //\n\n  const compareEmojiArrays = (a, b) => a.id === b.id;\n\n  const compareCurrentEmojisWithCategories = (a, b) => {\n    const { category: aCategory, emojis: aEmojis } = a;\n    const { category: bCategory, emojis: bEmojis } = b;\n\n    if (aCategory !== bCategory) {\n      return false\n    }\n\n    return arraysAreEqualByFunction(aEmojis, bEmojis, compareEmojiArrays)\n  };\n\n  //\n  // Update utils to avoid excessive re-renders\n  //\n\n  // avoid excessive re-renders by checking the value before setting\n  const updateCurrentEmojis = (newEmojis) => {\n    if (!arraysAreEqualByFunction(state.currentEmojis, newEmojis, compareEmojiArrays)) {\n      state.currentEmojis = newEmojis;\n    }\n  };\n\n  // avoid excessive re-renders\n  const updateSearchMode = (newSearchMode) => {\n    if (state.searchMode !== newSearchMode) {\n      state.searchMode = newSearchMode;\n    }\n  };\n\n  // avoid excessive re-renders\n  const updateCurrentEmojisWithCategories = (newEmojisWithCategories) => {\n    if (!arraysAreEqualByFunction(state.currentEmojisWithCategories, newEmojisWithCategories, compareCurrentEmojisWithCategories)) {\n      state.currentEmojisWithCategories = newEmojisWithCategories;\n    }\n  };\n\n  // Helpers used by PickerTemplate\n\n  const unicodeWithSkin = (emoji, currentSkinTone) => (\n    (currentSkinTone && emoji.skins && emoji.skins[currentSkinTone]) || emoji.unicode\n  );\n\n  const labelWithSkin = (emoji, currentSkinTone) => (\n    uniq([\n      (emoji.name || unicodeWithSkin(emoji, currentSkinTone)),\n      emoji.annotation,\n      ...(emoji.shortcodes || EMPTY_ARRAY)\n    ].filter(Boolean)).join(', ')\n  );\n\n  const titleForEmoji = (emoji) => (\n    emoji.annotation || (emoji.shortcodes || EMPTY_ARRAY).join(', ')\n  );\n\n  const helpers = {\n    labelWithSkin, titleForEmoji, unicodeWithSkin\n  };\n  const events = {\n    onClickSkinToneButton,\n    onEmojiClick,\n    onNavClick,\n    onNavKeydown,\n    onSearchKeydown,\n    onSkinToneOptionsClick,\n    onSkinToneOptionsFocusOut,\n    onSkinToneOptionsKeydown,\n    onSkinToneOptionsKeyup,\n    onSearchInput\n  };\n  const actions = {\n    calculateEmojiGridStyle\n  };\n\n  let firstRender = true;\n  createEffect(() => {\n    render(shadowRoot, state, helpers, events, actions, refs, abortSignal, firstRender);\n    firstRender = false;\n  });\n\n  //\n  // Determine the emoji support level (in requestIdleCallback)\n  //\n\n  // mount logic\n  if (!state.emojiVersion) {\n    detectEmojiSupportLevel().then(level => {\n      // Can't actually test emoji support in Jest/JSDom, emoji never render in color in Cairo\n      /* istanbul ignore next */\n      if (!level) {\n        state.message = state.i18n.emojiUnsupportedMessage;\n      }\n    });\n  }\n\n  //\n  // Set or update the database object\n  //\n\n  createEffect(() => {\n    // show a Loading message if it takes a long time, or show an error if there's a network/IDB error\n    async function handleDatabaseLoading () {\n      let showingLoadingMessage = false;\n      const timeoutHandle = setTimeout(() => {\n        showingLoadingMessage = true;\n        state.message = state.i18n.loadingMessage;\n      }, TIMEOUT_BEFORE_LOADING_MESSAGE);\n      try {\n        await state.database.ready();\n        state.databaseLoaded = true; // eslint-disable-line no-unused-vars\n      } catch (err) {\n        console.error(err);\n        state.message = state.i18n.networkErrorMessage;\n      } finally {\n        clearTimeout(timeoutHandle);\n        if (showingLoadingMessage) { // Seems safer than checking the i18n string, which may change\n          showingLoadingMessage = false;\n          state.message = ''; // eslint-disable-line no-unused-vars\n        }\n      }\n    }\n\n    if (state.database) {\n      /* no await */\n      handleDatabaseLoading();\n    }\n  });\n\n  //\n  // Global styles for the entire picker\n  //\n\n  createEffect(() => {\n    state.pickerStyle = `\n      --num-groups: ${state.groups.length}; \n      --indicator-opacity: ${state.searchMode ? 0 : 1}; \n      --num-skintones: ${NUM_SKIN_TONES};`;\n  });\n\n  //\n  // Set or update the customEmoji\n  //\n\n  createEffect(() => {\n    if (state.customEmoji && state.database) {\n      updateCustomEmoji(); // re-run whenever customEmoji change\n    }\n  });\n\n  createEffect(() => {\n    if (state.customEmoji && state.customEmoji.length) {\n      if (state.groups !== allGroups) { // don't update unnecessarily\n        state.groups = allGroups;\n      }\n    } else if (state.groups !== groups) {\n      if (state.currentGroupIndex) {\n        // If the current group is anything other than \"custom\" (which is first), decrement.\n        // This fixes the odd case where you set customEmoji, then pick a category, then unset customEmoji\n        state.currentGroupIndex--;\n      }\n      state.groups = groups;\n    }\n  });\n\n  //\n  // Set or update the preferred skin tone\n  //\n\n  createEffect(() => {\n    async function updatePreferredSkinTone () {\n      if (state.databaseLoaded) {\n        state.currentSkinTone = await state.database.getPreferredSkinTone();\n      }\n    }\n\n    /* no await */ updatePreferredSkinTone();\n  });\n\n  createEffect(() => {\n    state.skinTones = Array(NUM_SKIN_TONES).fill().map((_, i) => applySkinTone(state.skinToneEmoji, i));\n  });\n\n  createEffect(() => {\n    state.skinToneButtonText = state.skinTones[state.currentSkinTone];\n  });\n\n  createEffect(() => {\n    state.skinToneButtonLabel = state.i18n.skinToneLabel.replace('{skinTone}', state.i18n.skinTones[state.currentSkinTone]);\n  });\n\n  //\n  // Set or update the favorites emojis\n  //\n\n  createEffect(() => {\n    async function updateDefaultFavoriteEmojis () {\n      const { database } = state;\n      const favs = (await Promise.all(MOST_COMMONLY_USED_EMOJI.map(unicode => (\n        database.getEmojiByUnicodeOrName(unicode)\n      )))).filter(Boolean); // filter because in Jest tests we don't have all the emoji in the DB\n      state.defaultFavoriteEmojis = favs;\n    }\n\n    if (state.databaseLoaded) {\n      /* no await */ updateDefaultFavoriteEmojis();\n    }\n  });\n\n  function updateCustomEmoji () {\n    // Certain effects have an implicit dependency on customEmoji since it affects the database\n    // Getting it here on the state ensures this effect re-runs when customEmoji change.\n    // Setting it on the database is pointless but prevents this code from being removed by a minifier.\n    state.database.customEmoji = state.customEmoji || EMPTY_ARRAY;\n  }\n\n  createEffect(() => {\n    async function updateFavorites () {\n      updateCustomEmoji(); // re-run whenever customEmoji change\n      const { database, defaultFavoriteEmojis, numColumns } = state;\n      const dbFavorites = await database.getTopFavoriteEmoji(numColumns);\n      const favorites = await summarizeEmojis(uniqBy([\n        ...dbFavorites,\n        ...defaultFavoriteEmojis\n      ], _ => (_.unicode || _.name)).slice(0, numColumns));\n      state.currentFavorites = favorites;\n    }\n\n    if (state.databaseLoaded && state.defaultFavoriteEmojis) {\n      /* no await */ updateFavorites();\n    }\n  });\n\n  //\n  // Calculate the width of the emoji grid. This serves two purposes:\n  // 1) Re-calculate the --num-columns var because it may have changed\n  // 2) Re-calculate the scrollbar width because it may have changed\n  //   (i.e. because the number of items changed)\n  // 3) Re-calculate whether we're in RTL mode or not.\n  //\n  // The benefit of doing this in one place is to align with rAF/ResizeObserver\n  // and do all the calculations in one go. RTL vs LTR is not strictly width-related,\n  // but since we're already reading the style here, and since it's already aligned with\n  // the rAF loop, this is the most appropriate place to do it perf-wise.\n  //\n\n  function calculateEmojiGridStyle (node) {\n    calculateWidth(node, abortSignal, width => {\n      /* istanbul ignore next */\n      { // jsdom throws errors for this kind of fancy stuff\n        // read all the style/layout calculations we need to make\n        const style = getComputedStyle(refs.rootElement);\n        const newNumColumns = parseInt(style.getPropertyValue('--num-columns'), 10);\n        const newIsRtl = style.getPropertyValue('direction') === 'rtl';\n        const parentWidth = node.parentElement.getBoundingClientRect().width;\n        const newScrollbarWidth = parentWidth - width;\n\n        // write to state variables\n        state.numColumns = newNumColumns;\n        state.scrollbarWidth = newScrollbarWidth; // eslint-disable-line no-unused-vars\n        state.isRtl = newIsRtl; // eslint-disable-line no-unused-vars\n      }\n    });\n  }\n\n  //\n  // Set or update the currentEmojis. Check for invalid ZWJ renderings\n  // (i.e. double emoji).\n  //\n\n  createEffect(() => {\n    async function updateEmojis () {\n      const { searchText, currentGroup, databaseLoaded, customEmoji } = state;\n      if (!databaseLoaded) {\n        state.currentEmojis = [];\n        state.searchMode = false;\n      } else if (searchText.length >= MIN_SEARCH_TEXT_LENGTH) {\n        const newEmojis = await getEmojisBySearchQuery(searchText);\n        if (state.searchText === searchText) { // if the situation changes asynchronously, do not update\n          updateCurrentEmojis(newEmojis);\n          updateSearchMode(true);\n        }\n      } else { // database is loaded and we're not in search mode, so we're in normal category mode\n        const { id: currentGroupId } = currentGroup;\n        // avoid race condition where currentGroupId is -1 and customEmoji is undefined/empty\n        if (currentGroupId !== -1 || (customEmoji && customEmoji.length)) {\n          const newEmojis = await getEmojisByGroup(currentGroupId);\n          if (state.currentGroup.id === currentGroupId) { // if the situation changes asynchronously, do not update\n            updateCurrentEmojis(newEmojis);\n            updateSearchMode(false);\n          }\n        }\n      }\n    }\n\n    /* no await */ updateEmojis();\n  });\n\n  // Some emojis have their ligatures rendered as two or more consecutive emojis\n  // We want to treat these the same as unsupported emojis, so we compare their\n  // widths against the baseline widths and remove them as necessary\n  createEffect(() => {\n    const { currentEmojis, emojiVersion } = state;\n    const zwjEmojisToCheck = currentEmojis\n      .filter(emoji => emoji.unicode) // filter custom emoji\n      .filter(emoji => hasZwj(emoji) && !supportedZwjEmojis.has(emoji.unicode));\n    if (!emojiVersion && zwjEmojisToCheck.length) {\n      // render now, check their length later\n      updateCurrentEmojis(currentEmojis);\n      rAF(() => checkZwjSupportAndUpdate(zwjEmojisToCheck));\n    } else {\n      const newEmojis = emojiVersion ? currentEmojis : currentEmojis.filter(isZwjSupported);\n      updateCurrentEmojis(newEmojis);\n      // Reset scroll top to 0 when emojis change\n      rAF(() => resetScrollTopIfPossible(refs.tabpanelElement));\n    }\n  });\n\n  function checkZwjSupportAndUpdate (zwjEmojisToCheck) {\n    checkZwjSupport(zwjEmojisToCheck, refs.baselineEmoji, emojiToDomNode);\n    // force update\n    // eslint-disable-next-line no-self-assign\n    state.currentEmojis = state.currentEmojis;\n  }\n\n  function isZwjSupported (emoji) {\n    return !emoji.unicode || !hasZwj(emoji) || supportedZwjEmojis.get(emoji.unicode)\n  }\n\n  async function filterEmojisByVersion (emojis) {\n    const emojiSupportLevel = state.emojiVersion || await detectEmojiSupportLevel();\n    // !version corresponds to custom emoji\n    return emojis.filter(({ version }) => !version || version <= emojiSupportLevel)\n  }\n\n  async function summarizeEmojis (emojis) {\n    return summarizeEmojisForUI(emojis, state.emojiVersion || await detectEmojiSupportLevel())\n  }\n\n  async function getEmojisByGroup (group) {\n    // -1 is custom emoji\n    const emoji = group === -1 ? state.customEmoji : await state.database.getEmojiByGroup(group);\n    return summarizeEmojis(await filterEmojisByVersion(emoji))\n  }\n\n  async function getEmojisBySearchQuery (query) {\n    return summarizeEmojis(await filterEmojisByVersion(await state.database.getEmojiBySearchQuery(query)))\n  }\n\n  createEffect(() => {\n  });\n\n  //\n  // Derive currentEmojisWithCategories from currentEmojis. This is always done even if there\n  // are no categories, because it's just easier to code the HTML this way.\n  //\n\n  createEffect(() => {\n    function calculateCurrentEmojisWithCategories () {\n      const { searchMode, currentEmojis } = state;\n      if (searchMode) {\n        return [\n          {\n            category: '',\n            emojis: currentEmojis\n          }\n        ]\n      }\n      const categoriesToEmoji = new Map();\n      for (const emoji of currentEmojis) {\n        const category = emoji.category || '';\n        let emojis = categoriesToEmoji.get(category);\n        if (!emojis) {\n          emojis = [];\n          categoriesToEmoji.set(category, emojis);\n        }\n        emojis.push(emoji);\n      }\n      return [...categoriesToEmoji.entries()]\n        .map(([category, emojis]) => ({ category, emojis }))\n        .sort((a, b) => state.customCategorySorting(a.category, b.category))\n    }\n\n    const newEmojisWithCategories = calculateCurrentEmojisWithCategories();\n    updateCurrentEmojisWithCategories(newEmojisWithCategories);\n  });\n\n  //\n  // Handle active search item (i.e. pressing up or down while searching)\n  //\n\n  createEffect(() => {\n    state.activeSearchItemId = state.activeSearchItem !== -1 && state.currentEmojis[state.activeSearchItem].id;\n  });\n\n  //\n  // Handle user input on the search input\n  //\n\n  createEffect(() => {\n    const { rawSearchText } = state;\n    rIC(() => {\n      state.searchText = (rawSearchText || '').trim(); // defer to avoid input delays, plus we can trim here\n      state.activeSearchItem = -1;\n    });\n  });\n\n  function onSearchKeydown (event) {\n    if (!state.searchMode || !state.currentEmojis.length) {\n      return\n    }\n\n    const goToNextOrPrevious = (previous) => {\n      halt(event);\n      state.activeSearchItem = incrementOrDecrement(previous, state.activeSearchItem, state.currentEmojis);\n    };\n\n    switch (event.key) {\n      case 'ArrowDown':\n        return goToNextOrPrevious(false)\n      case 'ArrowUp':\n        return goToNextOrPrevious(true)\n      case 'Enter':\n        if (state.activeSearchItem === -1) {\n          // focus the first option in the list since the list must be non-empty at this point (it's verified above)\n          state.activeSearchItem = 0;\n        } else { // there is already an active search item\n          halt(event);\n          return clickEmoji(state.currentEmojis[state.activeSearchItem].id)\n        }\n    }\n  }\n\n  //\n  // Handle user input on nav\n  //\n\n  function onNavClick (event) {\n    const { target } = event;\n    const closestTarget = target.closest('.nav-button');\n    /* istanbul ignore if */\n    if (!closestTarget) {\n      return // This should never happen, but makes me nervous not to have it\n    }\n    const groupId = parseInt(closestTarget.dataset.groupId, 10);\n    refs.searchElement.value = ''; // clear search box input\n    state.rawSearchText = '';\n    state.searchText = '';\n    state.activeSearchItem = -1;\n    state.currentGroupIndex = state.groups.findIndex(_ => _.id === groupId);\n  }\n\n  function onNavKeydown (event) {\n    const { target, key } = event;\n\n    const doFocus = el => {\n      if (el) {\n        halt(event);\n        el.focus();\n      }\n    };\n\n    switch (key) {\n      case 'ArrowLeft':\n        return doFocus(target.previousElementSibling)\n      case 'ArrowRight':\n        return doFocus(target.nextElementSibling)\n      case 'Home':\n        return doFocus(target.parentElement.firstElementChild)\n      case 'End':\n        return doFocus(target.parentElement.lastElementChild)\n    }\n  }\n\n  //\n  // Handle user input on an emoji\n  //\n\n  async function clickEmoji (unicodeOrName) {\n    const emoji = await state.database.getEmojiByUnicodeOrName(unicodeOrName);\n    const emojiSummary = [...state.currentEmojis, ...state.currentFavorites]\n      .find(_ => (_.id === unicodeOrName));\n    const skinTonedUnicode = emojiSummary.unicode && unicodeWithSkin(emojiSummary, state.currentSkinTone);\n    await state.database.incrementFavoriteEmojiCount(unicodeOrName);\n    fireEvent('emoji-click', {\n      emoji,\n      skinTone: state.currentSkinTone,\n      ...(skinTonedUnicode && { unicode: skinTonedUnicode }),\n      ...(emojiSummary.name && { name: emojiSummary.name })\n    });\n  }\n\n  async function onEmojiClick (event) {\n    const { target } = event;\n    /* istanbul ignore if */\n    if (!target.classList.contains('emoji')) {\n      // This should never happen, but makes me nervous not to have it\n      return\n    }\n    halt(event);\n    const id = target.id.substring(4); // replace 'emo-' or 'fav-' prefix\n\n    /* no await */ clickEmoji(id);\n  }\n\n  //\n  // Handle user input on the skintone picker\n  //\n\n  function changeSkinTone (skinTone) {\n    state.currentSkinTone = skinTone;\n    state.skinTonePickerExpanded = false;\n    focus('skintone-button');\n    fireEvent('skin-tone-change', { skinTone });\n    /* no await */ state.database.setPreferredSkinTone(skinTone);\n  }\n\n  function onSkinToneOptionsClick (event) {\n    const { target: { id } } = event;\n    const match = id && id.match(/^skintone-(\\d)/); // skintone option format\n    /* istanbul ignore if */\n    if (!match) { // not a skintone option\n      return // This should never happen, but makes me nervous not to have it\n    }\n    halt(event);\n    const skinTone = parseInt(match[1], 10); // remove 'skintone-' prefix\n    changeSkinTone(skinTone);\n  }\n\n  function onClickSkinToneButton (event) {\n    state.skinTonePickerExpanded = !state.skinTonePickerExpanded;\n    state.activeSkinTone = state.currentSkinTone;\n    // this should always be true, since the button is obscured by the listbox, so this `if` is just to be sure\n    if (state.skinTonePickerExpanded) {\n      halt(event);\n      rAF(() => focus('skintone-list'));\n    }\n  }\n\n  // To make the animation nicer, change the z-index of the skintone picker button\n  // *after* the animation has played. This makes it appear that the picker box\n  // is expanding \"below\" the button\n  createEffect(() => {\n    if (state.skinTonePickerExpanded) {\n      refs.skinToneDropdown.addEventListener('transitionend', () => {\n        state.skinTonePickerExpandedAfterAnimation = true; // eslint-disable-line no-unused-vars\n      }, { once: true });\n    } else {\n      state.skinTonePickerExpandedAfterAnimation = false; // eslint-disable-line no-unused-vars\n    }\n  });\n\n  function onSkinToneOptionsKeydown (event) {\n    // this should never happen, but makes me nervous not to have it\n    /* istanbul ignore if */\n    if (!state.skinTonePickerExpanded) {\n      return\n    }\n    const changeActiveSkinTone = async nextSkinTone => {\n      halt(event);\n      state.activeSkinTone = nextSkinTone;\n    };\n\n    switch (event.key) {\n      case 'ArrowUp':\n        return changeActiveSkinTone(incrementOrDecrement(true, state.activeSkinTone, state.skinTones))\n      case 'ArrowDown':\n        return changeActiveSkinTone(incrementOrDecrement(false, state.activeSkinTone, state.skinTones))\n      case 'Home':\n        return changeActiveSkinTone(0)\n      case 'End':\n        return changeActiveSkinTone(state.skinTones.length - 1)\n      case 'Enter':\n        // enter on keydown, space on keyup. this is just how browsers work for buttons\n        // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html\n        halt(event);\n        return changeSkinTone(state.activeSkinTone)\n      case 'Escape':\n        halt(event);\n        state.skinTonePickerExpanded = false;\n        return focus('skintone-button')\n    }\n  }\n\n  function onSkinToneOptionsKeyup (event) {\n    // this should never happen, but makes me nervous not to have it\n    /* istanbul ignore if */\n    if (!state.skinTonePickerExpanded) {\n      return\n    }\n    switch (event.key) {\n      case ' ':\n        // enter on keydown, space on keyup. this is just how browsers work for buttons\n        // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html\n        halt(event);\n        return changeSkinTone(state.activeSkinTone)\n    }\n  }\n\n  async function onSkinToneOptionsFocusOut (event) {\n    // On blur outside of the skintone listbox, collapse the skintone picker.\n    const { relatedTarget } = event;\n    // The `else` should never happen, but makes me nervous not to have it\n    /* istanbul ignore else */\n    if (!relatedTarget || relatedTarget.id !== 'skintone-list') {\n      state.skinTonePickerExpanded = false;\n    }\n  }\n\n  function onSearchInput (event) {\n    state.rawSearchText = event.target.value;\n  }\n\n  return {\n    $set (newState) {\n      assign(state, newState);\n    },\n    $destroy () {\n      abortController.abort();\n    }\n  }\n}\n\nconst DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';\nconst DEFAULT_LOCALE = 'en';\n\nvar enI18n = {\n  categoriesLabel: 'Categories',\n  emojiUnsupportedMessage: 'Your browser does not support color emoji.',\n  favoritesLabel: 'Favorites',\n  loadingMessage: 'Loading…',\n  networkErrorMessage: 'Could not load emoji.',\n  regionLabel: 'Emoji picker',\n  searchDescription: 'When search results are available, press up or down to select and enter to choose.',\n  searchLabel: 'Search',\n  searchResultsLabel: 'Search results',\n  skinToneDescription: 'When expanded, press up or down to select and enter to choose.',\n  skinToneLabel: 'Choose a skin tone (currently {skinTone})',\n  skinTonesLabel: 'Skin tones',\n  skinTones: [\n    'Default',\n    'Light',\n    'Medium-Light',\n    'Medium',\n    'Medium-Dark',\n    'Dark'\n  ],\n  categories: {\n    custom: 'Custom',\n    'smileys-emotion': 'Smileys and emoticons',\n    'people-body': 'People and body',\n    'animals-nature': 'Animals and nature',\n    'food-drink': 'Food and drink',\n    'travel-places': 'Travel and places',\n    activities: 'Activities',\n    objects: 'Objects',\n    symbols: 'Symbols',\n    flags: 'Flags'\n  }\n};\n\nconst PROPS = [\n  'customEmoji',\n  'customCategorySorting',\n  'database',\n  'dataSource',\n  'i18n',\n  'locale',\n  'skinToneEmoji',\n  'emojiVersion'\n];\n\n// Styles injected ourselves, so we can declare the FONT_FAMILY variable in one place\nconst EXTRA_STYLES = `:host{--emoji-font-family:${FONT_FAMILY}}`;\n\nclass PickerElement extends HTMLElement {\n  constructor (props) {\n    super();\n    this.attachShadow({ mode: 'open' });\n    const style = document.createElement('style');\n    style.textContent = \":host{--emoji-size:1.375rem;--emoji-padding:0.5rem;--category-emoji-size:var(--emoji-size);--category-emoji-padding:var(--emoji-padding);--indicator-height:3px;--input-border-radius:0.5rem;--input-border-size:1px;--input-font-size:1rem;--input-line-height:1.5;--input-padding:0.25rem;--num-columns:8;--outline-size:2px;--border-size:1px;--skintone-border-radius:1rem;--category-font-size:1rem;display:flex;width:min-content;height:400px}:host,:host(.light){color-scheme:light;--background:#fff;--border-color:#e0e0e0;--indicator-color:#385ac1;--input-border-color:#999;--input-font-color:#111;--input-placeholder-color:#999;--outline-color:#999;--category-font-color:#111;--button-active-background:#e6e6e6;--button-hover-background:#d9d9d9}:host(.dark){color-scheme:dark;--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}@media (prefers-color-scheme:dark){:host{color-scheme:dark;--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}}:host([hidden]){display:none}button{margin:0;padding:0;border:0;background:0 0;box-shadow:none;-webkit-tap-highlight-color:transparent}button::-moz-focus-inner{border:0}input{padding:0;margin:0;line-height:1.15;font-family:inherit}input[type=search]{-webkit-appearance:none}:focus{outline:var(--outline-color) solid var(--outline-size);outline-offset:calc(-1*var(--outline-size))}:host([data-js-focus-visible]) :focus:not([data-focus-visible-added]){outline:0}:focus:not(:focus-visible){outline:0}.hide-focus{outline:0}*{box-sizing:border-box}.picker{contain:content;display:flex;flex-direction:column;background:var(--background);border:var(--border-size) solid var(--border-color);width:100%;height:100%;overflow:hidden;--total-emoji-size:calc(var(--emoji-size) + (2 * var(--emoji-padding)));--total-category-emoji-size:calc(var(--category-emoji-size) + (2 * var(--category-emoji-padding)))}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.hidden{opacity:0;pointer-events:none}.abs-pos{position:absolute;left:0;top:0}.gone{display:none!important}.skintone-button-wrapper,.skintone-list{background:var(--background);z-index:3}.skintone-button-wrapper.expanded{z-index:1}.skintone-list{position:absolute;inset-inline-end:0;top:0;z-index:2;overflow:visible;border-bottom:var(--border-size) solid var(--border-color);border-radius:0 0 var(--skintone-border-radius) var(--skintone-border-radius);will-change:transform;transition:transform .2s ease-in-out;transform-origin:center 0}@media (prefers-reduced-motion:reduce){.skintone-list{transition-duration:.001s}}@supports not (inset-inline-end:0){.skintone-list{right:0}}.skintone-list.no-animate{transition:none}.tabpanel{overflow-y:auto;-webkit-overflow-scrolling:touch;will-change:transform;min-height:0;flex:1;contain:content}.emoji-menu{display:grid;grid-template-columns:repeat(var(--num-columns),var(--total-emoji-size));justify-content:space-around;align-items:flex-start;width:100%}.category{padding:var(--emoji-padding);font-size:var(--category-font-size);color:var(--category-font-color)}.custom-emoji,.emoji,button.emoji{height:var(--total-emoji-size);width:var(--total-emoji-size)}.emoji,button.emoji{font-size:var(--emoji-size);display:flex;align-items:center;justify-content:center;border-radius:100%;line-height:1;overflow:hidden;font-family:var(--emoji-font-family);cursor:pointer}@media (hover:hover) and (pointer:fine){.emoji:hover,button.emoji:hover{background:var(--button-hover-background)}}.emoji.active,.emoji:active,button.emoji.active,button.emoji:active{background:var(--button-active-background)}.custom-emoji{padding:var(--emoji-padding);object-fit:contain;pointer-events:none;background-repeat:no-repeat;background-position:center center;background-size:var(--emoji-size) var(--emoji-size)}.nav,.nav-button{align-items:center}.nav{display:grid;justify-content:space-between;contain:content}.nav-button{display:flex;justify-content:center}.nav-emoji{font-size:var(--category-emoji-size);width:var(--total-category-emoji-size);height:var(--total-category-emoji-size)}.indicator-wrapper{display:flex;border-bottom:1px solid var(--border-color)}.indicator{width:calc(100%/var(--num-groups));height:var(--indicator-height);opacity:var(--indicator-opacity);background-color:var(--indicator-color);will-change:transform,opacity;transition:opacity .1s linear,transform .25s ease-in-out}@media (prefers-reduced-motion:reduce){.indicator{will-change:opacity;transition:opacity .1s linear}}.pad-top,input.search{background:var(--background);width:100%}.pad-top{height:var(--emoji-padding);z-index:3}.search-row{display:flex;align-items:center;position:relative;padding-inline-start:var(--emoji-padding);padding-bottom:var(--emoji-padding)}.search-wrapper{flex:1;min-width:0}input.search{padding:var(--input-padding);border-radius:var(--input-border-radius);border:var(--input-border-size) solid var(--input-border-color);color:var(--input-font-color);font-size:var(--input-font-size);line-height:var(--input-line-height)}input.search::placeholder{color:var(--input-placeholder-color)}.favorites{display:flex;flex-direction:row;border-top:var(--border-size) solid var(--border-color);contain:content}.message{padding:var(--emoji-padding)}\" + EXTRA_STYLES;\n    this.shadowRoot.appendChild(style);\n    this._ctx = {\n      // Set defaults\n      locale: DEFAULT_LOCALE,\n      dataSource: DEFAULT_DATA_SOURCE,\n      skinToneEmoji: DEFAULT_SKIN_TONE_EMOJI,\n      customCategorySorting: DEFAULT_CATEGORY_SORTING,\n      customEmoji: null,\n      i18n: enI18n,\n      emojiVersion: null,\n      ...props\n    };\n    // Handle properties set before the element was upgraded\n    for (const prop of PROPS) {\n      if (prop !== 'database' && Object.prototype.hasOwnProperty.call(this, prop)) {\n        this._ctx[prop] = this[prop];\n        delete this[prop];\n      }\n    }\n    this._dbFlush(); // wait for a flush before creating the db, in case the user calls e.g. a setter or setAttribute\n  }\n\n  connectedCallback () {\n    // The _cmp may be defined if the component was immediately disconnected and then reconnected. In that case,\n    // do nothing (preserve the state)\n    if (!this._cmp) {\n      this._cmp = createRoot(this.shadowRoot, this._ctx);\n    }\n  }\n\n  disconnectedCallback () {\n    // Check in a microtask if the element is still connected. If so, treat this as a \"move\" rather than a disconnect\n    // Inspired by Vue: https://vuejs.org/guide/extras/web-components.html#building-custom-elements-with-vue\n    qM(() => {\n      // this._cmp may be defined if connect-disconnect-connect-disconnect occurs synchronously\n      if (!this.isConnected && this._cmp) {\n        this._cmp.$destroy();\n        this._cmp = undefined;\n\n        const { database } = this._ctx;\n        database.close()\n          // only happens if the database failed to load in the first place, so we don't care\n          .catch(err => console.error(err));\n      }\n    });\n  }\n\n  static get observedAttributes () {\n    return ['locale', 'data-source', 'skin-tone-emoji', 'emoji-version'] // complex objects aren't supported, also use kebab-case\n  }\n\n  attributeChangedCallback (attrName, oldValue, newValue) {\n    this._set(\n      // convert from kebab-case to camelcase\n      // see https://github.com/sveltejs/svelte/issues/3852#issuecomment-665037015\n      attrName.replace(/-([a-z])/g, (_, up) => up.toUpperCase()),\n      // convert string attribute to float if necessary\n      attrName === 'emoji-version' ? parseFloat(newValue) : newValue\n    );\n  }\n\n  _set (prop, newValue) {\n    this._ctx[prop] = newValue;\n    if (this._cmp) {\n      this._cmp.$set({ [prop]: newValue });\n    }\n    if (['locale', 'dataSource'].includes(prop)) {\n      this._dbFlush();\n    }\n  }\n\n  _dbCreate () {\n    const { locale, dataSource, database } = this._ctx;\n    // only create a new database if we really need to\n    if (!database || database.locale !== locale || database.dataSource !== dataSource) {\n      this._set('database', new Database({ locale, dataSource }));\n    }\n  }\n\n  // Update the Database in one microtask if the locale/dataSource change. We do one microtask\n  // so we don't create two Databases if e.g. both the locale and the dataSource change\n  _dbFlush () {\n    qM(() => (\n      this._dbCreate()\n    ));\n  }\n}\n\nconst definitions = {};\n\nfor (const prop of PROPS) {\n  definitions[prop] = {\n    get () {\n      if (prop === 'database') {\n        // in rare cases, the microtask may not be flushed yet, so we need to instantiate the DB\n        // now if the user is asking for it\n        this._dbCreate();\n      }\n      return this._ctx[prop]\n    },\n    set (val) {\n      if (prop === 'database') {\n        throw new Error('database is read-only')\n      }\n      this._set(prop, val);\n    }\n  };\n}\n\nObject.defineProperties(PickerElement.prototype, definitions);\n\n/* istanbul ignore else */\nif (!customElements.get('emoji-picker')) { // if already defined, do nothing (e.g. same script imported twice)\n  customElements.define('emoji-picker', PickerElement);\n}\n\nexport { PickerElement as default };\n"],
  "mappings": "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",
  "names": ["set", "keyPath", "res", "emoji", "version", "_", "result", "customEmojiIndex", "results", "currentMap", "MIN_SEARCH_TEXT_LENGTH", "uniqBy", "set", "DEFAULT_DATA_SOURCE", "DEFAULT_LOCALE"]
}
